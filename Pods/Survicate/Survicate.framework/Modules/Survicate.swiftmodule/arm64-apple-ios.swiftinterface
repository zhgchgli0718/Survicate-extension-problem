// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Survicate
import CoreData
import Foundation
@_exported import Survicate
import Swift
import UIKit
@objc public enum LogLevel : Swift.Int, Swift.CustomStringConvertible, Swift.Comparable {
  case none = 0
  case error = 1
  case info = 2
  case verbose = 3
  public var description: Swift.String {
    get
  }
  public static func < (lhs: Survicate.LogLevel, rhs: Survicate.LogLevel) -> Swift.Bool
  public static func <= (lhs: Survicate.LogLevel, rhs: Survicate.LogLevel) -> Swift.Bool
  public static func >= (lhs: Survicate.LogLevel, rhs: Survicate.LogLevel) -> Swift.Bool
  public static func > (lhs: Survicate.LogLevel, rhs: Survicate.LogLevel) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc final public class SurvicateAnswer : ObjectiveC.NSObject {
  @objc final public var type: Swift.String?
  @objc final public var id: Foundation.NSNumber?
  @objc final public var ids: [Foundation.NSNumber]?
  @objc final public var value: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension SurvicateAnswer {
  @objc override final public var description: Swift.String {
    @objc get
  }
}
@objc public protocol SurvicateDelegate {
  @objc optional func surveyDisplayed(surveyId: Swift.String)
  @objc optional func questionAnswered(surveyId: Swift.String, questionId: Swift.Int, answer: Survicate.SurvicateAnswer)
  @objc optional func surveyCompleted(surveyId: Swift.String)
  @objc optional func surveyClosed(surveyId: Swift.String)
}
public struct UserTrait : Swift.Codable, Swift.Equatable {
  public init(withName name: Swift.String, value: Swift.String)
  public static func == (lhs: Survicate.UserTrait, rhs: Survicate.UserTrait) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension UserTrait : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension UserTrait {
  public static func userId(_ value: Swift.String) -> Survicate.UserTrait
  public static func firstName(_ value: Swift.String) -> Survicate.UserTrait
  public static func lastName(_ value: Swift.String) -> Survicate.UserTrait
  public static func email(_ value: Swift.String) -> Survicate.UserTrait
  public static func organization(_ value: Swift.String) -> Survicate.UserTrait
  public static func department(_ value: Swift.String) -> Survicate.UserTrait
  public static func jobTitle(_ value: Swift.String) -> Survicate.UserTrait
  public static func phone(_ value: Swift.String) -> Survicate.UserTrait
  public static func website(_ value: Swift.String) -> Survicate.UserTrait
  public static func addressOne(_ value: Swift.String) -> Survicate.UserTrait
  public static func addressTwo(_ value: Swift.String) -> Survicate.UserTrait
  public static func city(_ value: Swift.String) -> Survicate.UserTrait
  public static func state(_ value: Swift.String) -> Survicate.UserTrait
  public static func zip(_ value: Swift.String) -> Survicate.UserTrait
  public static func fax(_ value: Swift.String) -> Survicate.UserTrait
  public static func annualRevenue(_ value: Swift.String) -> Survicate.UserTrait
  public static func employees(_ value: Swift.String) -> Survicate.UserTrait
  public static func industry(_ value: Swift.String) -> Survicate.UserTrait
}
extension UIViewController {
  public var useWideLayout: Swift.Bool {
    get
  }
}
extension KeyedDecodingContainer {
  public func decode(_ type: Swift.String.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> Swift.String
}
prefix operator ^
@_inheritsConvenienceInitializers @objc final public class Survicate : ObjectiveC.NSObject {
  @objc public static var shared: Survicate.Survicate
  @objc weak final public var delegate: Survicate.SurvicateDelegate? {
    @objc get
    @objc set(newValue)
  }
  @objc final public func initialize()
  @objc final public func setApiKey(_ key: Swift.String)
  @objc final public func setUserTrait(withName name: Swift.String, value: Swift.String)
  @objc final public func setUserTraits(withNamesAndValues namesAndValues: [Swift.String : Swift.String])
  final public func setUserTrait(_ trait: Survicate.UserTrait)
  final public func setUserTraits(traits newTraits: [Survicate.UserTrait])
  @objc final public func setDebuggable(log level: Survicate.LogLevel)
  @objc final public func enterScreen(value: Swift.String)
  @objc final public func leaveScreen(value: Swift.String)
  @objc final public func invokeEvent(name: Swift.String)
  @objc final public func reset()
  @objc override dynamic public init()
  @objc deinit
}
